
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

enum ProjectType {
  ROAD
  DRAIN
  BUILDING
  ELECTRICAL
  PLUMBING
  OTHER
}

model Project {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  type        ProjectType
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  estimates   Estimate[]
  bills       Bill[]
  measurements Measurement[]
}

model Estimate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  items       Json[]   // Array of work items with quantities and rates
  totalAmount Float
  status      String   // draft, submitted, approved, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Measurement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  items       Json[]   // Array of measured items with actual quantities
  date        DateTime
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bill {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId     String   @db.ObjectId
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  billNumber    String   @unique
  items         Json[]   // Array of billed items with quantities and rates
  totalAmount   Float
  deductions    Json[]   // Array of deductions (security, retention, etc.)
  netAmount     Float
  status        String   // draft, submitted, approved, paid
  paymentDate   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
